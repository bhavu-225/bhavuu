# return tuple to print each value
mytuple=("banana","cherry","kiwi")
myit=iter(mytuple)
print(next(myit))
print(next(myit))
print(next(myit))
# -----------------------------------------
# each alphabet of string
mystr="banana"
myit=iter(mystr)
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
# ------------------------------------------
# tuple in loop
mytup=("banana","kiwi","apple")
for z in mytup:
    print(z)
# ---------------------------------------------
# string in loop
mystr="apple"
for z in mystr:
    print(z)
# -----------------------------------------------
# returns numbers, starting with 1, and each sequence will increase by one
class numbers:
    def __iter__(self):
        self.a= 1
        return self
    def __next__(self):
        z=self.a
        self.a+=1
        return z
myclass=numbers()
myit=iter(myclass)
print(next(myit)) 
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))  
# ----------------------------------------------
class mynumber:
    def __iter__(self):
        self.a = 1
        return self
    def __next__(self):
        if self.a <= 25:
            z = self.a
            self.a += 1
            return z
        else:
            raise StopIteration
myclass = mynumber()
myit = iter(myclass)
for z in myit:
    print(z)
# ------------------
class powertwo:
    def __init__(self,max):
        self.max=max
    def __iter__(self):
        self.a=1
        return self.max
    def __next__(self):
       if  self.a <= self.max:
        result =2** self.a
        self.a+=1
        return result
       else:
           StopIteration
myclass= powertwo()
myit=iter(myclass)
for m in myit:
    print(m)